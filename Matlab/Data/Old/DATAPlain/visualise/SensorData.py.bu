from string import split
from tictoc import tic, toc

class SensorEvent:
    def __init__(self, timestamp, val):
        self.ts = timestamp
        self.val = val

class SensorData:
    def __init__(self, datafile, namelist):
        self.startTime = 1e100
        self.endTime = 0
        self.sensorEvents = []
        for i in range(0,5000):
            self.sensorEvents.append([])
        self.sensors = []
        self.sensorIdx = {}

        f = open(datafile)
        for line in f:
            l = split(line)
            if len(l) == 4:
                start = float(l[0])
                end = float(l[1])
                id = int(float(l[2]))
            # print line, ": ", start, ",", end, ",", id;

                if start < self.startTime:
                    self.startTime = start
                if end > self.endTime:
                    self.endTime = end

                self.sensorEvents[id].append(SensorEvent(start,1))
                self.sensorEvents[id].append(SensorEvent(end,0))
                if self.sensors.count(id) == 0:
                    self.sensors.append(id)
            elif len(l) == 3:   # keyzer format
                t = self.unix2time(float(l[0]))
                id = int(float(l[1]))
                if t < self.startTime:
                    self.startTime = t
                if t > self.endTime:
                    self.endTime = t
                self.sensorEvents[id].append(SensorEvent(t,int(float(l[2]))))
                if self.sensors.count(id) == 0:
                    self.sensors.append(id)
            else:
                print "Can't parse",line
                
        self.sensors.sort()
        for i in range(len(self.sensors)):
            # print "Sensor ID %d at index %d\n" % (self.sensors[i],i)
            self.sensorIdx[self.sensors[i]] = i

        f.close()
        self.sensornames = {}
        f = open(namelist)
        for line in f:
            l = split(line,maxsplit=1)
            if len(l) == 2:
                id = int(eval(l[0]))
                self.sensornames[id] = l[1][:-1]
       
    def getEventList(self, sensorId):
        return self.sensorEvents[sensorId]
    
    def getEventListStartingAt(self, sensorId, t):
        lst = self.sensorEvents[sensorId]
        if t<lst[0].ts or t > lst[-1].ts:
            return self.sensorEvents[sensorId]
        
        up = len(lst)
        low = 0;
        c = (low+up)/2

        while True:
            # print "t=%d, low=%d ts=%d, up=%d up-1.ts=%d, c.ts=%d, c+1.ts=%d" % (t, low, lst[low].ts, up, lst[up-1].ts, lst[c].ts, lst[c+1].ts)
            if lst[c].ts > t:
                up = c
            elif lst[c+1].ts < t:
                low = c
            else:
                return lst[c:]

            c = (low+up)/2

    def getFirstTS(self):
        return self.startTime
    
    def getLastTS(self):
        return self.endTime
    
    def getSensorName(self, sensorID):
        if sensorID in self.sensornames:
            return self.sensornames[sensorID]
        else:
            return hex(sensorID)

    def getSensorID(self, index):
        if index>=len(self.sensors):
            return None
        else:
            return self.sensors[index]
        
    def getSensorIndex(self, ID):
        return self.sensorIdx[ID]

    def unix2time(self,t):
        return t/24./3600.+719529
    
